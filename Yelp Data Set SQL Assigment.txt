Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10000 records
select count(*) from attribute; 

ii. Business table = 10000  records
select count(*) from business;

iii. Category table = 10000  records
select count(*) from category;

iv. Checkin table = 10000  records
select count(*) from checkin;

v. elite_years table = 10000 records
select count(*) from elite_years;
 
vi. friend table = 10000 records
select count(*) from friend;

vii. hours table = 10000  records
select count(*) from hours;

viii. photo table = 10000 records
select count(*) from photo;

ix. review table = 10000 records
select count(*) from review;

x. tip table = 10000 records
select count(*) from tip;

xi. user table = 10000 records
select count(*) from user;

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 records

select count(*) from 
(
	select distinct id from business
) t1;

ii. Hours = 1562  records
select count(*) from  
(
	 select distinct business_id from hours
) t1;

iii. Category = 2643 records
select count(*) from  
( 
	select distinct business_id from category
) t1;

iv. Attribute = 1115 records
select count(*) from  
(
	 select distinct business_id from attribute
) t1;

v. Review = 10000 records
select count(*) from  
(
	 	select distinct id from review
) t1;

vi. Checkin = 493 records
select count(*) from  
(
	 	select distinct business_id from checkin
) t1;

vii. Photo = 10000 records
select count(*) from  
(	 
	select distinct id from photo
) t1;

viii. Tip = 537 records

select count(*) from  
(	 
	select distinct user_id from tip
) t1;

ix. User  10000 records
select count(*) from  
(	 
	select distinct id from user
) t1;

x. Friend = 11 records
select count(*) from  
(	 
	select distinct user_id from friend
) t1;

xi. Elite_years = 2780 records
select count(*) from  
(	 
	select distinct user_id from elite_years
) t1;

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: None of the columns have null values
	
	SQL code used to arrive at answer:
	
	select distinct case when id is null then 1 else 0 end as id, case when name is null then 1 else 0 end as name, case when review_count is null then 1 else 0 end as review_count, case when yelping_since is null then 1 else 0 end as yelping_since, case when useful is null then 1 else 0 end as useful, case when funny is null then 1 else 0 end as funny, case when cool is null then 1 else 0 end as cool, case when fans is null then 1 else 0 end as fans, case when average_stars is null then 1 else 0 end as average_stars, case when compliment_hot is null then 1 else 0 end as compliment_hot, case when compliment_more is null then 1 else 0 end as compliment_more, case when compliment_profile is null then 1 else 0 end as compliment_profile, case when compliment_cute is null then 1 else 0 end as compliment_cute, case when compliment_list is null then 1 else 0 end as compliment_list, case when compliment_note is null then 1 else 0 end as compliment_note, case when compliment_plain is null then 1 else 0 end as compliment_plain, case when compliment_cool is null then 1 else 0 end as compliment_cool, case when compliment_funny is null then 1 else 0 end as compliment_funny, case when compliment_writer is null then 1 else 0 end as compliment_writer, case when compliment_photos is null then 1 else 0 end as compliment_photos from user;



4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		 select min(stars), max(stars), avg(stars) from review;
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		 select min(stars), max(stars), avg(stars) from business;
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		 select min(likes), max(likes), avg(likes) from tip;
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		select min(count), max(count), avg(count) from checkin;
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		 select min(review_count), max(review_count), avg(review_count) from user;

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:	 
		select * from
	(
		select city, sum(review_count) as total_review_count from business
		group by city
	) t1
	order by t1.total_review_count desc; 
	
	Copy and Paste the Result Below:	
+-----------------+--------------------+
| city            | total_review_count |
+-----------------+--------------------+
| Las Vegas       |              82854 |
| Phoenix         |              34503 |
| Toronto         |              24113 |
| Scottsdale      |              20614 |
| Charlotte       |              12523 |
| Henderson       |              10871 |
| Tempe           |              10504 |
| Pittsburgh      |               9798 |
| Montréal        |               9448 |
| Chandler        |               8112 |
| Mesa            |               6875 |
| Gilbert         |               6380 |
| Cleveland       |               5593 |
| Madison         |               5265 |
| Glendale        |               4406 |
| Mississauga     |               3814 |
| Edinburgh       |               2792 |
| Peoria          |               2624 |
| North Las Vegas |               2438 |
| Markham         |               2352 |
| Champaign       |               2029 |
| Stuttgart       |               1849 |
| Surprise        |               1520 |
| Lakewood        |               1465 |
| Goodyear        |               1155 |
+-----------------+--------------------+
(Output limit exceeded, 25 of 362 total rows shown)

6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select stars, count(*) from business
where city="Avon"
group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+----------+
| stars | count(*) |
+-------+----------+
|   1.5 |        1 |
|   2.5 |        2 |
|   3.5 |        3 |
|   4.0 |        2 |
|   4.5 |        1 |
|   5.0 |        1 |
+-------+----------+


ii. Beachwood

SQL code used to arrive at answer:

select stars, count(*) from business
where city="Beachwood"
group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+----------+
| stars | count(*) |
+-------+----------+
|   2.0 |        1 |
|   2.5 |        1 |
|   3.0 |        2 |
|   3.5 |        2 |
|   4.0 |        1 |
|   4.5 |        2 |
|   5.0 |        5 |
+-------+----------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	select id, name, review_count from user
	order by review_count desc
	limit 3;
		
	Copy and Paste the Result Below:
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
		more reviews does not mean more fans.
	This is seen in below results.
	User having review_count 2000 has 253 fans. But, user having review_count 609 has highest fans
	
	select id, name, review_count, fans from user
	order by review_count desc
	limit 5;
	
	+------------------------+---------+--------------+------+
	| id                     | name    | review_count | fans |
	+------------------------+---------+--------------+------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald  |         2000 |  253 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara    |         1629 |   50 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri    |         1339 |   76 |
	| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon    |         1246 |  101 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William |         1215 |  126 |
	+------------------------+---------+--------------+------+

	select id, name, review_count, fans from user
	order by fans desc
	limit 5;
	
	+------------------------+-----------+--------------+------+
	| id                     | name      | review_count | fans |
	+------------------------+-----------+--------------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
	+------------------------+-----------+--------------+------+
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	
	reviews with word "love" is more than the reviews wth word "hate"
	
	SQL code used to arrive at answer:

	select count(*) from review where lower(text) like "%love%";
	+----------+
	| count(*) |
	+----------+
	|     1780 |
	+----------+
	
	select count(*) from review where lower(text) like "%hate%";
	+----------+
	| count(*) |
	+----------+
	|      232 |
	+----------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	select id, name, fans from user order by fans desc limit 10;

	
	Copy and Paste the Result Below:
	+------------------------+-----------+------+
	| id                     | name      | fans |
	+------------------------+-----------+------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
	| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
	+------------------------+-----------+------+


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Even though city is same, the latitude and longitude values differ a little.

SQL code used for analysis:

select count(t1.name), t1.city, t1.stars, t2.hours, t2.business_id, t1.id, t1.review_count, t1.latitude, t1.longitude
from hours t2 left outer join business t1
on t1.id=t2.business_id
where city='Phoenix' 
group by stars;

+----------------+---------+-------+----------------------+------------------------+------------------------+--------------+----------+-----------+
| count(t1.name) | city    | stars | hours                | business_id            | id                     | review_count | latitude | longitude |
+----------------+---------+-------+----------------------+------------------------+------------------------+--------------+----------+-----------+
|              7 | Phoenix |   2.0 | Saturday|5:00-0:00   | 1Ds8V2c7LlwSAA3O-9f4cA | 1Ds8V2c7LlwSAA3O-9f4cA |            8 |  33.4297 |  -112.066 |
|             21 | Phoenix |   3.0 | Saturday|9:00-2:00   | 2JV0xGXsszojof2BuEt_hw | 2JV0xGXsszojof2BuEt_hw |           60 |  33.6536 |  -112.064 |
|             18 | Phoenix |   3.5 | Monday|8:30-17:30    | 1T6N959Q85RcNol_TuULew | 1T6N959Q85RcNol_TuULew |           80 |   33.539 |  -112.064 |
|             12 | Phoenix |   4.0 | Saturday|11:00-22:00 | 2skQeu3C36VCiB653MIfrw | 2skQeu3C36VCiB653MIfrw |          431 |  33.5818 |  -112.008 |
|              7 | Phoenix |   4.5 | Saturday|11:00-18:00 | 1mkDrJRu3VABKy95gxD-Hg | 1mkDrJRu3VABKy95gxD-Hg |            7 |  33.4468 |  -112.057 |
|             23 | Phoenix |   5.0 | Saturday|7:30-19:30  | 1LO0TD--3eHaBXEsIZMLFw | 1LO0TD--3eHaBXEsIZMLFw |           40 |  33.6273 |  -112.089 |
+----------------+---------+-------+----------------------+------------------------+------------------------+--------------+----------+-----------+
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         More businesses are open than closed
         
ii. Difference 2:
         Businesses with average reviews have more closed percent
         
         
SQL code used for analysis:

select t1.stars, t1.open_count, t2.close_count, (100 * t2.close_count)/(t1.open_count + t2.close_count) as close_percent from
(
	select stars, count(*) as open_count from business
	where is_open=1
	group by stars
) t1 inner join
(
	select stars, count(*) as close_count from business
	where is_open=0
	group by stars
) t2
on t1.stars=t2.stars;

+-------+------------+-------------+---------------+
| stars | open_count | close_count | close_percent |
+-------+------------+-------------+---------------+
|   1.0 |        142 |          14 |             8 |
|   1.5 |        182 |          24 |            11 |
|   2.0 |        472 |          94 |            16 |
|   2.5 |        722 |         168 |            18 |
|   3.0 |       1124 |         272 |            19 |
|   3.5 |       1483 |         295 |            16 |
|   4.0 |       1679 |         326 |            16 |
|   4.5 |       1249 |         189 |            13 |
|   5.0 |       1427 |         138 |             8 |
+-------+------------+-------------+---------------+

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
		Finding the business categories that have less probability of closing
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
		I need business and category tables data for analysis.
		We need open and close count from business table. We need category from category table.
		Two tables are joined using id from business table and business_id from category table
                  
iii. Output of your finished dataset:

+------------------------+------------+-------------+---------------+
| category               | open_count | close_count | close_percent |
+------------------------+------------+-------------+---------------+
| Health & Medical       |         16 |           1 |             5 |
| Home Services          |         15 |           1 |             6 |
| Beauty & Spas          |         12 |           1 |             7 |
| Hotels & Travel        |          8 |           1 |            11 |
| Burgers                |          7 |           1 |            12 |
| Food                   |         20 |           3 |            13 |
| Local Services         |         10 |           2 |            16 |
| Shopping               |         25 |           5 |            16 |
| Bakeries               |          4 |           1 |            20 |
| Indian                 |          4 |           1 |            20 |
| Pubs                   |          4 |           1 |            20 |
| Breakfast & Brunch     |          3 |           1 |            25 |
| Chinese                |          3 |           1 |            25 |
| Fashion                |          3 |           1 |            25 |
| Home & Garden          |          3 |           1 |            25 |
| Restaurants            |         53 |          18 |            25 |
| Sandwiches             |          6 |           2 |            25 |
| Sushi Bars             |          3 |           1 |            25 |
| American (Traditional) |          8 |           3 |            27 |
| Mexican                |          5 |           2 |            28 |
| Carpet Cleaning        |          2 |           1 |            33 |
| Mobile Phones          |          2 |           1 |            33 |
| Tobacco Shops          |          2 |           1 |            33 |
| Vape Shops             |          2 |           1 |            33 |
| Bars                   |         11 |           6 |            35 |
+------------------------+------------+-------------+---------------+
(Output limit exceeded, 25 of 49 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:

select t3.category, t3.open_count, t4.close_count, (100 * t4.close_count)/(t3.open_count + t4.close_count) as close_percent from
(
	select t2.category, count(*) as open_count
	from business t1 inner join category t2
	on t1.id=t2.business_id
	where t1.is_open=1
	group by t2.category
) t3 inner join
(
	select t2.category, count(*) as close_count
	from business t1 inner join category t2
	on t1.id=t2.business_id
	where t1.is_open=0
	group by t2.category
) t4
on t3.category=t4.category
order by close_percent asc;